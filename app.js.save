const express = require("express.js");
const path = require("path");

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");

const jsonwebtoken = require("jsonwebtoken");
const bcrypt = require("bcrypt");

const dbPath = path.join(__dirname, "courierTracking.db");
const app = express();

app.use(express.json());

let db = "";

//initialization of  database

const initializationDataBaseServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running Successfully On https://localhost:3000");
    });
  } catch (error) {
    console.log(`DataBase Error ${error.message}`);
    process.exit(1);
  }
};

initializationDataBaseServer();

//Registration Of User

app.post("/register/", async (request, response) => {
  const { username, password, name, gender, mailId } = request.body;
  //check whether user already exists
  const fetchUserExistence = `SELECT * FROM userdetails WHERE username=${username}`;

  const userDetails = await db.get(fetchUserExistence);

  if (userDetails === undefined) {
    //create new user
    if (password.length > 5) {
      const hashedPassword = await bcrypt.hash(password, 10);
      const createNewUser = `INSERT INTO userdetails (username,password,name,gender,mail_id) VALUES
            (
                '${username}',
                '${password}',
                '${name}',
                '${gender}',
                '${mail_id}',
            
            
            );`;
      await db.run(createNewUser);
      response.status(200);
      response.send("User Created Successfully");
    } else {
      response.status(400);
      response.send("Password must be more than  5 Characters");
    }
  } else {
    response.status(400);
    response.send("User Name Already Exists");

